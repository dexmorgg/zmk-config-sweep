// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 3000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 150

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jkesc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
        };

        medialayer {
            bindings = <&to 4>;
            key-positions = <0 1 2>;
        };

        shortcut-layer {
            bindings = <&tog 5>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W       &kp E        &kp R        &kp T                     &kp Y                   &kp U        &kp I        &kp O       &kp P
&ht LGUI A  &ht LALT S  &ht LSHFT D  &ht LCTRL F  &ht LS(LC(LA(LGUI))) G    &ht RS(RC(RA(RGUI))) H  &ht RCTRL J  &ht RSHFT K  &ht RALT L  &ht RGUI SEMI
&kp Z       &kp X       &kp C        &kp V        &ht LS(LC(LALT)) B        &ht RS(RC(RALT)) N      &kp M        &kp COMMA    &kp DOT     &kp FSLH
                                     &lt 1 TAB    &lt 4 ENTER               &kp SPACE               &lt 2 BSPC
            >;
        };

        num_layer {
            bindings = <
&kp N1      &kp N2    &kp N3     &kp N4     &kp N5                  &kp N6        &kp N7                &kp N8                &kp N9           &kp N0
&kp LGUI    &kp LALT  &kp LSHFT  &kp LCTRL  &kp LS(LC(LA(LGUI)))    &kp LEFT      &kp DOWN              &kp UP                &kp RIGHT        &kp SEMI
&caps_word  &kp N7    &kp N8     &kp N9     &kp N0                  &kp C_VOL_DN  &kp C_BRIGHTNESS_DEC  &kt C_BRIGHTNESS_INC  &kp C_VOLUME_UP  &kp C_MUTE
                                 &trans     &kp ESC                 &trans        &trans
            >;
        };

        sym_layer {
            bindings = <
&kp EXCL       &kp AT          &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR
&kp GRAVE      &kp TILDE       &kp LBRC  &kp LBKT   &kp LPAR     &kp RPAR   &kp RBKT   &kp RBRC   &kp DQT   &kp SQT
&kp LG(LS(C))  &kp LG(LS(N4))  &trans    &kp EQUAL  &kp PLUS     &kp MINUS  &kp UNDER  &kp BSLH   &kp PIPE  &trans
                                         &trans     &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &bt BT_SEL 3  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &bt BT_SEL 4  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans        &trans  &trans  &trans  &trans
                             &trans      &trans          &trans        &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans          &mkp MB4        &mkp MB5      &trans           &trans
&trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp MB3
&trans  &trans  &trans  &trans  &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                        &trans  &trans    &mkp MB1        &mkp MB2
            >;
        };

        shortcut_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
