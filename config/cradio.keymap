// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 4500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 200

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 34 35 15 16 17 18 19 5 6 7 8 9 25 26 27 28 29>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 34 35 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jkesc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
        };

        medialayer {
            bindings = <&to 4>;
            key-positions = <0 1 2>;
        };

        shortcut-layer {
            bindings = <&tog 6>;
            key-positions = <32 31>;
        };

        df_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <12 13>;
        };

        sd_del {
            bindings = <&kp BACKSPACE>;
            key-positions = <12 11>;
        };

        ty_mouse {
            bindings = <&tog 4>;
            key-positions = <4 5>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <20 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R         &kp T                      &kp Y                    &kp U         &kp I         &kp O        &kp P
&hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &hml LS(LC(LA(LGUI))) G    &hmr RS(RC(RA(RGUI))) H  &hmr RCTRL J  &hmr RSHFT K  &hmr RALT L  &hmr RGUI SEMI
&kp Z        &kp X        &kp C         &kp V         &ht LS(LC(LALT)) B         &ht RS(RC(RALT)) N       &kp M         &kp COMMA     &kp DOT      &kp FSLH
                                        &lt 1 TAB     &lt 4 ENTER                &lt 5 SPACE              &lt 2 BSPC
            >;
        };

        num_layer {
            bindings = <
&kp N1         &kp N2                &kp N3             &kp N4             &kp N5                          &kp N6                                &kp N7                 &kp N8                &kp N9                      &kp N0
&hml LGUI A    &hml LALT LC(F1)      &hml LSHFT LC(F2)  &hml LCTRL LC(F3)  &hml LS(LC(LA(LGUI))) LC(F4)    &hmr LS(LC(LA(LEFT_GUI))) LEFT_ARROW  &hmr RCTRL DOWN_ARROW  &hmr RIGHT_SHIFT UP   &hmr RIGHT_ALT RIGHT_ARROW  &hmr RIGHT_GUI SEMI
&kp LS(LG(C))  &kp LS(LG(NUMBER_4))  &kp N8             &kp N9             &kp N0                          &kp C_VOL_DN                          &kp C_BRIGHTNESS_DEC   &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP             &kp C_MUTE
                                                        &trans             &trans                          &trans                                &trans
            >;
        };

        sym_layer {
            bindings = <
&kp EXCL       &kp AT          &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS         &kp ASTRK        &kp LPAR       &kp RPAR
&kp GRAVE      &kp TILDE       &kp LBRC  &kp LBKT   &kp LPAR     &kp RPAR   &hmr RCTRL RBKT  &hmr RSHFT RBRC  &hmr RALT DQT  &hmr RGUI SQT
&kp LG(LS(C))  &kp LG(LS(N4))  &trans    &kp EQUAL  &kp PLUS     &kp MINUS  &kp UNDER        &kp BSLH         &kp PIPE       &trans
                                         &trans     &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &bt BT_SEL 3  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &bt BT_SEL 4  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans        &trans  &trans  &trans  &trans
                             &trans      &trans          &trans        &trans
            >;
        };

        mouse_layer {
            bindings = <
&ht LG(SLASH) O      &ht LA(LEFT_BRACKET) LEFT_BRACKET  &ht LG(RIGHT_BRACKET) RIGHT_BRACKET  &kp LC(C)                &ht LS(P) L            &trans          &mkp MB4        &mkp MB5        &trans           &trans
&ht LS(A) LA(A)      &kp LA(S)                          &kp LA(D)                            &ht LA(H) LA(V)          &kp LG(G)              &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &trans
&ht LG(LS(Z)) LG(Z)  &kp LG(X)                          &ht LA(LG(C)) LG(C)                  &ht LA(LG(V)) LG(LA(V))  &ht LA(LC(T)) SPACE    &msc SCRL_LEFT  &msc SCRL_UP    &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans
                                                                                             &kp SPACE                &trans                 &mkp MB1        &mkp MB2
            >;
        };

        shortcut_layer {
            bindings = <
&kp LA(F1)   &kp LA(F2)   &kp LA(F3)   &kp LA(F4)   &kp LA(F5)        &kp LA(F6)      &kp LA(F7)      &kp LA(F8)      &kp LA(F9)      &kp LA(F10)
&kp LA(F11)  &kp LA(F12)  &kp LA(F13)  &kp LA(F14)  &kp LA(F15)       &kp LA(F16)     &kp LA(F17)     &kp LA(F18)     &kp LA(F19)     &kp LA(F20)
&kp LA(F21)  &kp LA(F22)  &kp LA(F23)  &kp LA(F24)  &kp LA(LS(F1))    &kp LA(LS(F2))  &kp LA(LS(F3))  &kp LA(LS(F4))  &kp LA(LS(F5))  &kp LA(LS(F6))
                                       &trans       &trans            &trans          &trans
            >;
        };

        shortcut_layer_2 {
            bindings = <
&kp LC(F1)   &kp LA(F2)   &kp LC(F3)   &kp LC(F4)   &kp LC(F5)        &kp LC(F6)      &kp LC(F7)      &kp LC(F8)      &kp LC(F9)      &kp LC(F10)
&kp LC(F11)  &kp LC(F12)  &kp LC(F13)  &kp LC(F14)  &kp LC(F15)       &kp LC(F16)     &kp LC(F17)     &kp LC(F18)     &kp LC(F19)     &kp LC(F20)
&kp LC(F21)  &kp LC(F22)  &kp LC(F23)  &kp LC(F24)  &kp LC(LS(F1))    &kp LC(LS(F2))  &kp LC(LS(F3))  &kp LC(LS(F4))  &kp LC(LS(F5))  &kp LC(LS(F6))
                                       &trans       &trans            &trans          &trans
            >;
        };
    };
};
